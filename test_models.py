import tensorflow as tf
import numpy as np
import cv2
import json

# ğŸ”¹ Charger le modÃ¨le entraÃ®nÃ©
try:
    model = tf.keras.models.load_model("currency_classifier.h5")
    print("âœ… ModÃ¨le chargÃ© avec succÃ¨s !")
except Exception as e:
    print("ğŸš¨ Erreur lors du chargement du modÃ¨le :", e)
    exit()

# ğŸ”¹ Charger l'ordre des classes utilisÃ© Ã  l'entraÃ®nement
try:
    with open("class_indices.json", "r") as f:
        classes = json.load(f)
        classes = {int(k): v for k, v in classes.items()}  # Convertir les clÃ©s en entiers
    print("âœ… Classes chargÃ©es :", classes)
except Exception as e:
    print("ğŸš¨ Erreur lors du chargement des classes :", e)
    exit()

# ğŸ”¹ Charger une image de test
img_path = "test10.jpeg"  # Change avec ton image
img = cv2.imread(img_path)

if img is None:
    print("ğŸš¨ Erreur : Image non trouvÃ©e ! VÃ©rifie le chemin :", img_path)
    exit()

# ğŸ”¹ PrÃ©traitement de l'image
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convertir en RGB
img = cv2.resize(img, (224, 224))  # Redimensionner pour MobileNetV2
img = img / 255.0  # Normalisation
img = np.expand_dims(img, axis=0)  # Ajouter une dimension batch

# VÃ©rification des dimensions
print("âœ… Image prÃ©traitÃ©e - Forme :", img.shape)
print("âœ… Min/Max des pixels :", img.min(), img.max())

# ğŸ”¹ Faire la prÃ©diction
prediction = model.predict(img)
predicted_class = classes[np.argmax(prediction)]

print(f"ğŸ’° Cette image reprÃ©sente : {predicted_class}")
